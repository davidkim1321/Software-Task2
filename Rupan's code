import tkinter as tk
from tkinter import ttk

class Entity:
    def __init__(self, name: str, health: int, strength: int, stamina: int, agility: int, intelligence: int, resistance: int, mainattack: str, attackdamage: int, weapon: str, skill1: str, skill2: str, skill3: str, skill4: str, skill5: str):
        self.name = name
        self.health = health
        self.strength = strength
        self.stamina = stamina
        self.agility = agility
        self.intelligence = intelligence
        self.resistance = resistance
        self.mainattack = mainattack
        self.attackdamage = attackdamage
        self.is_alive = True
        self.weapon = weapon
        self.skill1 = skill1
        self.skill2 = skill2
        self.skill3 = skill3
        self.skill4 = skill4
        self.skill5 = skill5
    

class Enemy:
    def __init__(self, name, health, mainattack, attackdamage, XPdrop, Itemdrop):
        self.name = name
        self.health = health
        self.mainattack = mainattack
        self.attackdamage = attackdamage
        self.is_alive = True
        self.XPdrop = XPdrop
        self.Itemdrop = Itemdrop
        

class Siren(Enemy):
    def show(self):
        print("I am a {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop {}".format(self.Itemdrop))

Siren = Siren("siren", 50, "Enchanted songs", 0, 2, "Scales")
Siren.show()
         

class Manticore(Enemy):
    def show(self):    
        print("I am a {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop {}".format(self.Itemdrop))

x = Manticore("manticore", 85, "Poison Spike", 5, 5, "Poisonous Tail")
x.show()
 
class Griffin(Enemy):
    def show(self):
        print("I am a {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop {}".format(self.Itemdrop))
        
Griffin = Griffin("griffin", 75, "Swoop", 4, 3, "feathers")
Griffin.show()

class Minotaur(Enemy):
    def show(self):
        print("I am a {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop my {}".format(self.Itemdrop))

Minotaur = Minotaur("minotaur", 95, "Gore Attack", 10, 6, "set of horns")
Minotaur.show()

class Gorgon(Enemy):
    def show(self):
        print("I am a {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is the {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop my {}".format(self.Itemdrop))

Gorgon = Gorgon("gorgon", 90, "Stone Stare", 100, 6, "head")
Gorgon.show()

class Sphinx(Enemy):
    def show(self):
        print("I am a {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop my {}".format(self.Itemdrop))

Sphinx = Sphinx("sphinx", 70, "Puzzles", 3, 3, "fangs")
Sphinx.show()

class Centaur(Enemy):
    def show(self):
        print("I am a {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop {}".format(self.Itemdrop))

Centaur = Centaur("sphinx", 65, "sniping arrows", 4, 2, "hooves and a crossbow")
Centaur.show()

class Cyclops(Enemy):
    def show(self):
        print("I am a {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop {}".format(self.Itemdrop))

Cyclops = Cyclops("cyclops", 85, "charging", 12, 6, "nothing")
Cyclops.show()

class Cerberus(Enemy):
    def show(self):
        print("I am {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop my {}".format(self.Itemdrop))

Cerberus = Cerberus("Cerberus", 70, "mauling", 3, 4, "three heads")
Cerberus.show()

class Chimera(Enemy):
    def show(self):
        print("I am {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop a {}".format(self.Itemdrop))

Chimera = Chimera("chimera", 95, "breathing fire", 10, 7, "lion-skin")
Chimera.show()

class Hydra(Enemy):
    def show(self):
        print("I am {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop a {}".format(self.Itemdrop))

Hydra = Hydra("hydra", 80, "spitting poison", 10, 5, "potion of poison")
Hydra.show()

class Mermaid(Enemy):
    def show(self):
        print("I am {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop {}".format(self.Itemdrop))

Mermaid = Mermaid("mermaid", 60, "charmspeak", 0, 1, "scales")
Mermaid.show()

class Merman(Enemy):
    def show(self):
        print("I am {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop {}".format(self.Itemdrop))

Merman = Merman("merman", 60, "jabbing with trident", 5, 1.5, "scales")
Merman.show()

class Kraken(Enemy):
    def show(self):
        print("I am {}".format(self.name))
        print("I have {} health".format(self.health))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I drop {} XP".format(self.XPdrop))
        print("I drop {}".format(self.Itemdrop))

Kraken = Kraken("kraken", 100, "lashing out with tentacles", 8, 7, "slime")
Kraken.show()

class Hero(Entity):
    def show(self):
        print("I am {}".format(self.name))
        print("I have {} health".format(self.health))
        print("I have {} strength".format(self.strength))
        print("I have {} stamina".format(self.stamina))
        print("I have {} agility".format(self.agility))
        print("I have {} intelligence".format(self.intelligence))
        print("I have {} resistance".format(self.resistance))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I have a {}".format(self.weapon))
        print("My skills include:")
        print("{}".format(self.skill1))
        print("{}".format(self.skill2))
        print("{}".format(self.skill3))
        print("{}".format(self.skill4))
        print("{}".format(self.skill5))

y = Hero (f"Adam", 100, 18, 18, 18, 20, 16, "Stab", 8, "holy sword", "stabbing", "punching", "parrying", "blocking", "dodging")
y.show()

class MainPlayer(Entity):
    def show(self):
        print("I am {}".format(self.name))
        print("I have {} health".format(self.health))
        print("I have {} strength".format(self.strength))
        print("I have {} stamina".format(self.stamina))
        print("I have {} agility".format(self.agility))
        print("I have {} intelligence".format(self.intelligence))
        print("I have {} resistance".format(self.resistance))
        print("My main attack is {}".format(self.mainattack))
        print("I do {} damage".format(self.attackdamage))
        print("I have a {}".format(self.weapon))
        print("My skills include:")
        print("{}".format(self.skill1))
        print("{}".format(self.skill2))
        print("{}".format(self.skill3))
        print("{}".format(self.skill4))
        print("{}".format(self.skill5))
    
    
z = MainPlayer (f"Adonis", 45, 5, 6, 16, 7, 6, "Kick", 2, "skeleton bone", "Dodging", "Blocking", "Running", "Kicking", "Punching")
z.show()

'''class Entity:
    def __init__(self, name, health, main_attack, weapon):
        self.name = name
        self.health = health
        self.main_attack = main_attack
        self.weapon = weapon
'''

def attack(self, target):
    damage = self.mainattack + self.attackdamage
    target.take_damage(damage)
    print(f"{self.name} attacks {target.name} with {self.weapon.name} causing {damage} damage.")

def take_damage(self, damage):
    self.health -= damage
    if self.health <= 0:
         self.health = 0
         print(f"{self.name} has been defeated.")
    else:
         print(f"{self.name} takes {damage} damage and now has {self.health} health left.")

def __str__(self):
    return f"Entity(name={self.name}, health={self.health}, main_attack={self.main_attack}, weapon={self.weapon})"

class Weapon:
    def __init__(self, name, damage):
        self.name = name
        self.damage = damage

    def __str__(self):
        return f"Weapon(name={self.name}, damage={self.damage})"

# Example usage
if __name__ == "__main__":
    sword = Weapon("Sword", 10)
    dragon = Entity("Dragon", 100, 20, sword)
    knight = Entity("Knight", 50, 15, sword)

    print(dragon)
    print(knight)

    dragon.attack(knight)
    knight.attack(dragon)

    

if __name__ == "__main__":
    player = Player("Adonis")
    
    while player.is_alive:
        print("You wake, and find yourself in a dungeon, surrounded by glinting lights. You have no idea how you got here, the only memory in your mind one of shrieks of panic.")
        print("You look around you, and you see four options: You can go east, west, north or south. All of them lead to further darkness.")
        print("But if you want to get out of here, it doesn't look like you have much choice.")
        action = input("Enter based 'North', 'West', 'South', 'East', or 'quit' to progress the game: ").lower()
        if action == "North":
            self.display_message("You walk on slowly, and encounter a prison cage, filled with the cries of... monsters?")
            self.display_message("You take a closer look, and you realise that these are sea creatures.")
